<body  >
<div align="center" >
 <h1 style="margin-bottom:-0.5%"><b>Faux-QuBits</b></br>
 <sup>--<i>Under-Construction</i>--</sup></br></h1>
<input id="inp" value="Input here"  maxlength="38" onfocus="this.value=''; document.getElementById('data1').innerHTML='';"  style="text-align:center;" /><input type="button" onclick="document.getElementById('data1').innerHTML=ascii_to_base38(inp.value); document.getElementById('data2').innerHTML=document.getElementById('inp').value;" value="submit"/></br>
<span>[Generic Binary Field]:
 <p id="data1" style="background-color:black;color:lightgreen"></p></span>  ::  <p id="data2" style="background-color:black;color:lightgreen"></p></span>
<hr style="margin-bottom:-1%">
<h6><h5><b>Resources:</b></h5><h6>
 <div style="margin-left:15%;margin-bottom:-0.69%;">
  <li><a href="https://codepen.io/nullobject/pen/cngzI">nullobject (console.logs)</li>
 </div>
   <div style="margin-right:15%;margin-top:-0.83.5%;">
 <li><a href="https://codepen.io/w3resource/pen/KeRQjG">w3resource (ascii2hex)</li>
</h6></h6>
<hr style="margin-top:-0.75%">
 <div align="center"><footer style="background-color:lightgrey;padding-bottom:1.25%"></br>
<a  href="https://codepen.io/digimancer3d/full/gOpXmNp" style="color:green;">Find this <q>Generic fQbit and Bin field Generator</q> (<i>by <b>3D</i></b>) on <b>CodePen</b></a> 
 </footer></div></div>

<script>
 
 function ascii_to_base38(str1)
  {
var cars = btoa(str1);
var text = "";
var i;
for (i = 0; i < cars.length; i++) {
  text += cars[i];
  var dars = []; var hod = []; hod = -1;
  for (var e = cars.length; e > 0; e--) {
  dars =+ text.charCodeAt(hod+e)+dars;
  var text2 = cars.charCodeAt(e);
  var text3 = []; for(var r = hod+2.5; r <= (i+1); r++){
  text3 =+ text3+text2;
}}}
   var tet=text3;
var mark = ((cars.length/tet))+" ("+text3+") "+(tet*cars.length);

 var mq =+ Math.sqrt(Math.sqrt(Math.sqrt(Math.sqrt(Math.sqrt(Math.sqrt(Math.sqrt(Math.sqrt(Math.sqrt(Math.sqrt(Math.sqrt(Math.sqrt(Math.sqrt(Math.sqrt(Math.sqrt(tet))))))))))))))); 
 <!--the aboce "Math.sqrt([...](input)[...])" isn't set up correctly, it needs to perform the Math.sqrt(input) per the length of the base64 of the input. -->
 
   var vc = (Math.pow(tet, Math.sqrt(tet))); var sr = Math.sqrt(tet); var po = Math.pow(tet, 2);
var nexr1 = mq+" | "+vc+" |:| "+sr+" | "+po;
   
   var ck1 = 0; var ck2 = 0; var ck3 = 0; var ck4 = 0;
   var ck5 = 0; var ck6 = 0; var ck7 = 0; var ck8 = 0;
   var set1 = 0, set2 = 0, set3 = 0, set4 = 0, set5 = 0, set6 = 0, set7 = 0, set8 = 0; 
   var set1a = 0, set2a = 0, set3a = 0, set4a = 0, set5a = 0, set6a = 0, set7a = 0, set8a = 0; <!--unused so far-->
   var set9 = 0, set10 = 0, set11 = 0, set12 = 0, set13 = 0, set14 = 0, set15 = 0, set16 = 0;

    
//check b64 length for even or odd
   if(text.length%2 == 0 & mq > tet) {
    ck1 = 1;
   }
   else if(text.length%3 == 0 & mq > tet) {
    ck1 = 1;
   }
   else  if(text.length%3 == 0 & mq < tet){
    ck2 = 0;
   }
   else if(text.length%3 == 0 & mq < tet){
    ck2 = 0;
   }
   if(text.length%2 == 0 & vc > tet) {
    ck2 = 0;
   }
   else if(text.length%3 == 0 & vc > tet){
    ck2 = 0;
   }
   else  if(text.length%2 == 0 & vc < tet){
    ck2 = 1;
   }
   else if(text.length%3 == 0 & vc < tet){
    ck2 = 1;
   }
   if(text.length%2 == 0 & sr > tet) {
    ck3 = 0;
   }
   else if(text.length%3 == 0 & sr > tet){
    ck3 = 1;
   }
   else if(text.length%3 == 0 & sr < tet){
    ck3 = 1;
   }
   else  if(text.length%2 == 0 & sr < tet) {
     ck3 = 0;
    }
   if(text.length%2 == 0 & po > tet) {
    ck4 = 1;
   }
   else if(text.length%3 == 0 & po > tet){
    ck4 = 0;
   }
   else if(text.length%3 == 0 & po < tet){
    ck4 = 0;
   }
   else if(text.length%2 == 0 & po < tet) {
     ck4 = 1;
    }

   
   //check if single prime or not
   var m,flag=0,number;
		number = Number(mq);

		for(m=2; m <= number/2; m++)
		{
			if(number%m == 0)
			{
				flag = 1;
				break;
			}
		}
		if(flag == 0)
		{
			ck5 = 0;
		}
		 else if(flag == 1)
		{
			ck5 = 0;
		}
   var nm,flag2=0,number2;
		number2 = Number(vc);

		for(nm=2; nm <= number2/2; nm++)
		{
			if(number2%nm == 0)
			{
				flag2 = 1;
				break;
			}
		}
		if(flag2 == 0)
		{
  ck6 = 1;
  }
		 else if(flag2 == 1)
		{
  ck6 = 1;
  }
var nn,flag3=0,number3;
		number3 = Number(sr);

		for(nn=2; nn <= number3/2; nn++)
		{
			if(number3%nn == 0)
			{
				flag3 = 1;
				break;
			}
		}
		if(flag3 == 0)
		{
  ck7 = 0;
  }
		 else if(flag3 == 1)
		{
  ck7 = 1;
  }
var mm,flag4=0,number4;
		number4 = Number(po);

		for(mm=2; mm <= number4/2; mm++)
		{
			if(number4%mm == 0)
			{
				flag4 = 1;
				break;
			}
		}
		if(flag4 == 0)
		{
  ck8 = 0;
  }
	 else if(flag4 == 1)
		{
  ck8 = 1;
  }

   <!-- Didn't do double and triple prime checks -->
   
   
   if(ck1 == 0 && ck5 == 0){
    set1 = 1; set2 = 0;
   }
   else  if(ck1 == 1 && ck5 == 0){
    set1 = 0; set2 = 1;
   }
    else if(ck1 == 0 && ck5 == 1){
    set1 = 1; set2 = 0;
   }
    else if(ck1 == 1 && ck5 == 1){
    set1 = 1; set2 = 1;
   }
   
   
   if(ck2 == 0 && ck6 == 0){
    set3 = 0; set4 = 1;
   }
    else if(ck2 == 1 && ck6 == 0){
    set3 = 0; set4 = 1;
   }
    else if(ck2 == 0 && ck6 == 1){
    set3 = 1; set4 = 0;
   }
   else if(ck2 == 1 && ck6 == 1){
    set3 = 0; set4 = 0;
   }
   
   if(ck3 == 0 && ck7 == 0){
    set5 = 0; set6 = 0;
   }
   else if(ck3 == 1 && ck7 == 0){
    set5 = 0; set6 = 1;
   }
   else if(ck3 == 0 && ck7 == 1){
    set5 = 1; set6 = 0;
   }
   else if(ck3 == 1 && ck7 == 1){
    set5 = 0; set6 = 0;
   }
   
   if(ck4 == 0 & ck8 == 0){
    set7 = 1; set8 = 1;
   }
    else if(ck4 == 1 & ck8 == 0){
    set7 = 0; set8 = 1;
   }
    else if(ck4 == 0 & ck8 == 1){
    set7 = 1; set8 = 0;
   }
   else  if(ck4 == 1 & ck8 == 1){
    set7 = 0; set8 = 0;
   }
   if(set1 === set3){
    set9 = 0; set10 = 0;
   }
   else if(set2 === set4){
    set9 = 1; set10 = 0;
   }
   if(set3 === set5){
    set11 = 0; set12 = 0;
   }
   else if(set4 === set6){
    set11 = 0; set12 = 1;
   }
   if(set4 === set7){
    set13 = 0; set14 = 0;
   }
   else if(set5 === set8){
    set13 = 1; set14 = 0;
   }
   if(set6 === set1){
    set15 = 1; set16 = 1;
   }
   else if(set7 === set2){
    set15 = 1; set16 = 1;
   }
   
   var joinset1 = 0, joinset2 = 0, joinset3 = 0, joinset4 = 0;
   joinset1 = set1+""+set2+""+set9+""+set10; joinset2 = set3+""+set4+""+set11+""+set12; joinset3 = set5+""+set6+""+set13+""+set14; joinset4 = set7+""+set8+""+set15+""+set16;
   
    var joinset1a = 0, joinset2a = 0, joinset3a = 0, joinset4a = 0;
   joinset1a = set9+""+set10+""+set1+""+set2; joinset2a = set11+""+set12+""+set3+""+set4; joinset3a = set13+""+set14+""+set5+""+set6; joinset4a = set15+""+set16+""+set7+""+set8;
   
   var rest1a =0, rest1b =0, rest1c =0, rest1d =0, rest2a =0, rest2b =0, rest2c =0, rest2d =0, rest3a =0, rest3b =0, rest3c =0, rest3d =0, rest4a =0, rest4b =0, rest4c =0, rest4d =0; 
   
    var rest1aa =0, rest1ba =0, rest1ca =0, rest1da =0, rest2ab =0, rest2bb =0, rest2cb =0, rest2db =0, rest3ac =0, rest3bc =0, rest3cc =0, rest3dc =0, rest4ad =0, rest4bd =0, rest4cd =0, rest4dd =0; 
   
    var left1aa =0, left1ba =0, left1ca =0, left1da =0, left2ab =0, left2bb =0, left2cb =0, left2db =0, left3ac =0, left3bc =0, left3cc =0, left3dc =0, left4ad =0, left4bd =0, left4cd =0, left4dd =0; 
    
   if(ck1 === set1){
    rest1a = 1; rest1c = 1;
rest1ba = 1; rest1da = 1;
        
   }else{
    rest1a = 0; rest1c = 0;
    rest1ba = 0; rest1da = 0;

   }
   if(ck5 === set2){
    rest1b = 1; rest1d = 1;
    rest1aa = 1; rest1ca = 1;

   }else{
    rest1b = 0; rest1d = 0;
    rest1aa = 0; rest1ca = 0;

   }
   if(ck2 === set3){
    rest2a = 1; rest2c = 1;
rest2bb = 1; rest2db = 1;
        
   }else{
    rest2a = 0; rest2c = 0;
rest2bb = 0; rest2db = 0;
       }
   if(ck6 === set4){
    rest2b = 1; rest2d = 1;
    rest2ab = 1; rest2cb = 1;
    
   }else{
    rest2b = 0; rest2d = 0;
    rest2ab = 0; rest2cb = 0;
   }
   if(ck3 === set5){
    rest3a = 1; rest3c = 1;
rest3bc = 1; rest3dc = 1;
        
   }else{
    rest3a = 0; rest3c = 0;
    rest3bc = 0; rest3dc = 0;
   
   }
   if(ck7 === set6){
    rest3b = 1; rest3d = 1;
    rest3ac = 1; rest3cc = 1;
    
   }else{
    rest3b = 0; rest3d = 0;
    rest3ac = 0; rest3cc = 0;
   }
   if(ck4 === set7){
    rest4a = 1; rest4c = 1;
    rest4bd = 1; rest4dd = 1;
    
   }else{
    rest4a = 0; rest4c = 0;
   rest4bd = 0; rest4dd = 0;
    }
   if(ck8 === set8){
    rest4b = 1; rest4d = 1;
    rest4ad = 1; rest4cd = 1;
    
   }else{
    rest4b = 0; rest4d = 0;
    rest4ad = 0; rest4cd = 0;
   }
   
    var left1a =0, left1b =0, left1c =0, left1d =0, left2a =0, left2b =0, left2c =0, left2d =0, left3a =0, left3b =0, left3c =0, left3d =0, left4a =0, left4b =0, left4c =0, left4d =0; 
    
   if(ck1 === set1 === rest1a){
    left1a = 1; left1c = 1; 
    
   }else{
    left1a = 0; left1c = 0;
   }
   if(ck5 === set2 === rest1b){
    left1b = 1; left1d = 1;
    
   }else{
    left1b = 0; left1d = 0;
   }
   if(ck2 === set3 === rest1c){
    left2a = 1; left2c = 1;
    
   }else{
    left2a = 0; left2c = 0;
   }
   if(ck6 === set4 === rest1d){
    left2b = 1; left2d = 1;
    
   }else{
    left2b = 0; left2d = 0;
   }
   if(ck3 === set5 === rest2a){
    left3a = 1; left3c = 1;
    
   }else{
    left3a = 0; left3c = 0;
   }
   if(ck7 === set6 === rest2b){
    left3b = 1; left3d = 1;
    
   }else{
    left3b = 0; left3d = 0;
   }
   if(ck4 === set7 === rest2c){
    left4a = 1; left4c = 1;
    
   }else{
    left4a = 0; left4c = 0;
   }
   if(ck8 === set8 === rest2d){
    left4b = 1; left4d = 1;
    
   }else{
    left4b = 0; left4d = 0;
   }
    
var joinset1b = 0, joinset2b = 0, joinset3b = 0, joinset4b = 0;
  joinset1b = set9+""+set10+""+set1+""+set2; joinset2b = set11+""+set12+""+set3+""+set4; joinset3b = set13+""+set14+""+set5+""+set6; joinset4b = set15+""+set16+""+set7+""+set8;
  
    var joinset1c = 0, joinset2c = 0, joinset3c = 0, joinset4c = 0;
   joinset1c = set1+""+set2+""+set9+""+set10; joinset2c = set3+""+set4+""+set11+""+set12; joinset3c = set5+""+set6+""+set13+""+set14; joinset4c = set7+""+set8+""+set15+""+set16;
   
   if(ck1 === set1 === rest1aa){
    left1aa = 1; left1ca = 1; 
    
   }else{
    left1aa = 0; left1ca = 0;
   }
   if(ck5 === set2 === rest1ba){
    left1ba = 1; left1da = 1;
    
   }else{
    left1ba = 0; left1da = 0;
   }
   if(ck2 === set3 === rest1ca){
    left2ab = 1; left2cb = 1;
    
   }else{
    left2ab = 0; left2cb = 0;
   }
   if(ck6 === set4 === rest1da){
    left2bb = 1; left2db = 1;
    
   }else{
    left2bb = 0; left2db = 0;
   }
   if(ck3 === set5 === rest2ab){
    left3ac = 1; left3cc = 1;
    
   }else{
    left3ac = 0; left3cc = 0;
   }
   if(ck7 === set6 === rest2bb){
    left3bc = 1; left3dc = 1;
    
   }else{
    left3bc = 0; left3dc = 0;
   }
   if(ck4 === set7 === rest2cb){
    left4ad = 1; left4cd = 1;
    
   }else{
    left4ad = 0; left4cd = 0;
   }
   if(ck8 === set8 === rest2db){
    left4bd = 1; left4dd = 1;
    
   }else{
    left4bd = 0; left4dd = 0;
   }
   
   
   
	return "<hr>"+text+"</br>"+dars+"<hr>"+text3+"</br>"+mark+"<hr>"+nexr1+"</br><hr></br>&nbsp;"+ck1+"&nbsp;&nbsp;&nbsp;&nbsp;"+ck2+"&nbsp;&nbsp;&nbsp;&nbsp;"+ck3+"&nbsp;&nbsp;&nbsp;&nbsp;"+ck4+"&nbsp;</br>&nbsp;"+ck5+"&nbsp;&nbsp;&nbsp;&nbsp;"+ck6+"&nbsp;&nbsp;&nbsp;&nbsp;"+ck7+"&nbsp;&nbsp;&nbsp;&nbsp;"+ck8+"&nbsp;</br>"+set1+""+set2+"&nbsp;&nbsp;"+set3+""+set4+"&nbsp;&nbsp;"+set5+""+set6+"&nbsp;&nbsp;"+set7+""+set8+"</br>"+set9+""+set10+"&nbsp;&nbsp;"+set11+""+set12+"&nbsp;&nbsp;"+set13+""+set14+"&nbsp;&nbsp;"+set15+""+set16+"<hr>"+joinset1+"&nbsp;"+joinset2+"&nbsp;"+joinset3+"&nbsp;"+joinset4+"&nbsp;&nbsp;"+joinset1b+"&nbsp;"+joinset2b+"&nbsp;"+joinset3b+"&nbsp;"+joinset4b+"</br>"+joinset1a+"&nbsp;"+joinset2a+"&nbsp;"+joinset3a+"&nbsp;"+joinset4a+"&nbsp;&nbsp;"+joinset1c+"&nbsp;"+joinset2c+"&nbsp;"+joinset3c+"&nbsp;"+joinset4c+"</br>"+rest1a+""+rest1b+""+rest1c+""+rest1d+"&nbsp;"+rest2a+""+rest2b+""+rest2c+""+rest2d+"&nbsp;"+rest3a+""+rest3b+""+rest3c+""+rest3d+"&nbsp;"+rest4a+""+rest4b+""+rest4c+""+rest4d+"&nbsp;&nbsp;"+rest1ba+""+rest1aa+""+rest1da+""+rest1ca+"&nbsp;"+rest2bb+""+rest2ab+""+rest2db+""+rest2cb+"&nbsp;"+rest3bc+""+rest3ac+""+rest3dc+""+rest3cc+"&nbsp;"+rest4bd+""+rest4ad+""+rest4dd+""+rest4cd+"</br>"+left1a+""+left1b+""+left1c+""+left1d+"&nbsp;"+left2a+""+left2b+""+left2c+""+left2d+"&nbsp;"+left3a+""+left3b+""+left3c+""+left3d+"&nbsp;"+left4a+""+left4b+""+left4c+""+left4d+"&nbsp;&nbsp;"+left1ba+""+left1aa+""+left1da+""+left1ca+"&nbsp;"+left2bb+""+left2ab+""+left2db+""+left2cb+"&nbsp;"+left3bc+""+left3ac+""+left3dc+""+left3cc+"&nbsp;"+left4bd+""+left4ad+""+left4dd+""+left4cd+"<hr></br>";
  }
console.log(ascii_to_base38(data1.value));


</script>
</body>
